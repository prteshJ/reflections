What happens when you initialize a repository? Why do you need to do it?

When I initialize a repository using 'git init', my repository becomes a git
repository and I can see using 'ls -a' command a '.git' file which ensures
my repository was correctly intialized as a Git repository.
I need to do it, so that I can use powerful Git features on the repository 
as well as to create a repository using Git.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

A staging area is like an intermediate stage where we can add changes to be 
committed. It is very useful since it allows us to add not only single file 
but also multiple files which we need to commit using Git. It also allows
us to undo files we added for changes to be committed in case we accidentally
added wrong files using 'git reset' command.

How can you use the staging area to make sure you have one commit per logical
change?

I have to be careful to ensure my changes are logical before I add those
to staging area.
Once I have done above, I can use 'git diff' command to see changes in 
files I want to commit by looking at their snapshots in staging area 
and workspace directory. 
This would help me understand if my changes are in sync or out of sync. 
I can safely now commit my changes using 'git commit' once my changes are 
in sync at working directory and staging area to my Git repository.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
